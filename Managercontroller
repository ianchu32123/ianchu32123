package ncu.im3069.demo.controller;



import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import org.json.*;
import ncu.im3069.demo.app.Manager;
import ncu.im3069.demo.app.ManagerHelper;
import ncu.im3069.tools.JsonReader;
import javax.servlet.annotation.WebServlet;

@WebServlet("/api/manager.do")
public class ManagerController extends HttpServlet {

    private static final long serialVersionUID = 1L;
    private ManagerHelper mh = ManagerHelper.getHelper();

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        JsonReader jsr = new JsonReader(request);
        JSONObject jso = jsr.getObject();

        String action = jso.optString("action", "");
        if ("login".equals(action)) {
            handleLogin(jso, jsr, response);
        } else {
            handleCreateOrUpdate(jso, jsr, response);
        }
    }

    private void handleLogin(JSONObject jso, JsonReader jsr, HttpServletResponse response)
            throws IOException {
        String email = jso.getString("email");
        String password = jso.getString("password");

        boolean isValidUser = mh.validateLogin(email, password);

        JSONObject resp = new JSONObject();
        if (isValidUser) {
            resp.put("status", "200");
            resp.put("message", "登入成功");
        } else {
            resp.put("status", "400");
            resp.put("message", "登入失敗：管理員不存在或密碼錯誤");
        }

        jsr.response(resp, response);
    }

    private void handleCreateOrUpdate(JSONObject jso, JsonReader jsr, HttpServletResponse response)
            throws IOException {
        String action = jso.optString("action");

        JSONObject resp = new JSONObject();
        switch (action) {
            case "add":
                handleCreate(jso, jsr, resp);
                break;
            case "update":
                handleUpdate(jso, jsr, resp);
                break;
            default:
                resp.put("status", "400");
                resp.put("message", "無效的請求操作");
                break;
        }

        jsr.response(resp, response);
    }

    private void handleCreate(JSONObject jso, JsonReader jsr, JSONObject resp) throws IOException {
        String name = jso.getString("name");
        String email = jso.getString("email");
        String password = jso.getString("password");

        Manager m = new Manager(name, email, password);

        if (name.isEmpty() || email.isEmpty() || password.isEmpty()) {
            resp.put("status", "400");
            resp.put("message", "欄位不能有空值");
        } else if (!mh.checkDuplicate(m)) {
            JSONObject data = mh.create(m);

            resp.put("status", "200");
            resp.put("message", "成功! 新增管理員資料...");
            resp.put("response", data);
        } else {
            resp.put("status", "400");
            resp.put("message", "新增帳號失敗，此E-Mail帳號重複！");
        }
    }

    private void handleUpdate(JSONObject jso, JsonReader jsr, JSONObject resp) throws IOException {
        int id = jso.optInt("id");
        String name = jso.optString("name");
        String email = jso.optString("email");
        String password = jso.optString("password");

        Manager m = new Manager(id, name, email, password);

        JSONObject data = m.update();

        resp.put("status", "200");
        resp.put("message", "成功! 更新管理員資料...");
        resp.put("response", data);
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        JsonReader jsr = new JsonReader(request);
        String id = jsr.getParameter("id");

        if (id.isEmpty()) {
            JSONObject query = mh.getAll();

            JSONObject resp = new JSONObject();
            resp.put("status", "200");
            resp.put("message", "所有管理員資料取得成功");
            resp.put("response", query);

            jsr.response(resp, response);
        } else {
            JSONObject query = mh.getById(id);

            JSONObject resp = new JSONObject();
            resp.put("status", "200");
            resp.put("message", "管理員資料取得成功");
            resp.put("response", query);

            jsr.response(resp, response);
        }
    }

    protected void doDelete(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        JsonReader jsr = new JsonReader(request);
        JSONObject jso = jsr.getObject();

        int id = jso.optInt("id");

        JSONObject query = mh.deleteById(id);

        JSONObject resp = new JSONObject();
        resp.put("status", "200");
        resp.put("message", "管理員移除成功！");
        resp.put("response", query);

        jsr.response(resp, response);
    }

    protected void doPut(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        JsonReader jsr = new JsonReader(request);
        JSONObject jso = jsr.getObject();

        int id = jso.optInt("id");
        String name = jso.optString("name");
        String email = jso.optString("email");
        String password = jso.optString("password");

        Manager m = new Manager(id, name, email, password);

        JSONObject data = m.update();

        JSONObject resp = new JSONObject();
        resp.put("status", "200");
        resp.put("message", "成功! 更新管理員資料...");
        resp.put("response", data);

        jsr.response(resp, response);
    }
}
